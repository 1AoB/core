From a65c19ee42e9c9a2728497d6ea42a32dd516ea93 Mon Sep 17 00:00:00 2001
From: Kai Zou <double1kai@gmail.com>
Date: Fri, 18 Oct 2024 10:01:39 +0800
Subject: [PATCH 1/4] [loong64] fix some bugs in type conversion on Loongarch
X-Developer-Signature: v=1; a=openpgp-sha256; l=4201; i=xtex@aosc.io;
 h=from:subject; bh=XTSCL4cd9w9LM40ioj+FZRuks/XFKeHfRWGBQfQdrWE=;
 b=owGbwMvMwCW2U4Ij7wZL9ETG02pJDOmr/sbfCshtPdTqW/9lttfaXbYdfb9WnqxiMDrPY27Ow
 x4g9j+8o5SFQYyLQVZMkaXIsMGbVSedX3RZuSzMHFYmkCEMXJwCMJGz7xgZXvbdNJ0eeDbII2NR
 fObeCr82UW7W//P0l7w8sqFmysuJVxj+CjaUTNptuKahJOrs7m/GPE9jLzpt2ipQ9phl9e+3P17
 P5QcA
X-Developer-Key: i=xtex@aosc.io; a=openpgp;
 fpr=7231804B052C670F15A6771DB918086ED8045B91

Backported of 7e8c7385e673 ("fix some bugs in type conversion on
Loongarch").

Change-Id: I5751928376acbe298d923b465cc9303bd5bac2bb
Reviewed-on: https://skia-review.googlesource.com/c/skia/+/909436
Reviewed-by: Greg Daniel <egdaniel@google.com>
Reviewed-by: Ben Wagner <bungeman@google.com>
Commit-Queue: Ben Wagner <bungeman@google.com>
Signed-off-by: Bingwu Zhang <xtex@aosc.io>
---
 src/opts/SkRasterPipeline_opts.h | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/opts/SkRasterPipeline_opts.h b/src/opts/SkRasterPipeline_opts.h
index e1783a589075..d12968d876b5 100644
--- a/src/opts/SkRasterPipeline_opts.h
+++ b/src/opts/SkRasterPipeline_opts.h
@@ -943,22 +943,22 @@ namespace SK_OPTS_NS {
     SI F   abs_  (F v)          { return (F)__lasx_xvand_v((I32)v, (I32)(0-v));     }
     SI I32 abs_(I32 v)          { return max(v, -v);                     }
     SI F   rcp_approx(F v)      { return __lasx_xvfrecip_s(v);           }
-    SI F   rcp_precise (F v)    { F e = rcp_approx(v); return e * nmad(v, e, 2.0f); }
+    SI F   rcp_precise (F v)    { F e = rcp_approx(v); return e * nmad(v, e, F() + 2.0f); }
     SI F   rsqrt_approx (F v)   { return __lasx_xvfrsqrt_s(v);           }
     SI F    sqrt_(F v)          { return __lasx_xvfsqrt_s(v);            }
 
     SI U32 iround(F v) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lasx_xvftintrz_w_s(v + t);
     }
 
     SI U32 round(F v) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lasx_xvftintrz_w_s(v + t);
     }
 
     SI U32 round(F v, F scale) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lasx_xvftintrz_w_s(mad(v, scale, t));
     }
 
@@ -993,8 +993,8 @@ namespace SK_OPTS_NS {
 
     template <typename T>
     SI V<T> gather(const T* p, U32 ix) {
-        return { p[ix[0]], p[ix[1]], p[ix[2]], p[ix[3]],
-                 p[ix[4]], p[ix[5]], p[ix[6]], p[ix[7]], };
+        return V<T>{ p[ix[0]], p[ix[1]], p[ix[2]], p[ix[3]],
+                     p[ix[4]], p[ix[5]], p[ix[6]], p[ix[7]], };
     }
 
     template <typename V, typename S>
@@ -1147,20 +1147,20 @@ namespace SK_OPTS_NS {
     SI F   abs_(F v)            { return (F)__lsx_vand_v((I32)v, (I32)(0-v));       }
     SI I32 abs_(I32 v)          { return max(v, -v);                     }
     SI F   rcp_approx (F v)     { return __lsx_vfrecip_s(v);             }
-    SI F   rcp_precise (F v)    { F e = rcp_approx(v); return e * nmad(v, e, 2.0f); }
+    SI F   rcp_precise (F v)    { F e = rcp_approx(v); return e * nmad(v, e, F() + 2.0f); }
     SI F   rsqrt_approx (F v)   { return __lsx_vfrsqrt_s(v);             }
     SI F    sqrt_(F v)          { return __lsx_vfsqrt_s (v);             }
 
     SI U32 iround(F v) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lsx_vftintrz_w_s(v + t); }
 
     SI U32 round(F v) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lsx_vftintrz_w_s(v + t); }
 
     SI U32 round(F v, F scale) {
-        F t = F(0.5);
+        F t = F() + 0.5f;
         return __lsx_vftintrz_w_s(mad(v, scale, t)); }
 
     SI U16 pack(U32 v) {
@@ -1196,15 +1196,15 @@ namespace SK_OPTS_NS {
 
     template <typename T>
     SI V<T> gather(const T* p, U32 ix) {
-        return {p[ix[0]], p[ix[1]], p[ix[2]], p[ix[3]]};
+        return V<T>{p[ix[0]], p[ix[1]], p[ix[2]], p[ix[3]]};
     }
     // Using 'int*' prevents data from passing through floating-point registers.
     SI F   gather(const int*    p, int ix0, int ix1, int ix2, int ix3) {
        F ret = {0.0};
-       ret = __lsx_vinsgr2vr_w(ret, p[ix0], 0);
-       ret = __lsx_vinsgr2vr_w(ret, p[ix1], 1);
-       ret = __lsx_vinsgr2vr_w(ret, p[ix2], 2);
-       ret = __lsx_vinsgr2vr_w(ret, p[ix3], 3);
+       ret = (F)__lsx_vinsgr2vr_w(ret, p[ix0], 0);
+       ret = (F)__lsx_vinsgr2vr_w(ret, p[ix1], 1);
+       ret = (F)__lsx_vinsgr2vr_w(ret, p[ix2], 2);
+       ret = (F)__lsx_vinsgr2vr_w(ret, p[ix3], 3);
        return ret;
     }
 

base-commit: b988efa06f8aa3bfeaa18c5b8c716ff244ab43cf
-- 
2.48.1

